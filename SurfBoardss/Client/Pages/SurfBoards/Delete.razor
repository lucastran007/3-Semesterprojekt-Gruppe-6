@page "/delete/{ID:guid}"
@using SurfBoardss.Shared
@inject HttpClient Http
@inject NavigationManager navigationManager


<h3>Delete</h3>

@if (surfBoard !=null)
{
    <div>
        <hr />
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@surfBoard.BoardName</dd>
            <dt class="col-sm-2">Length</dt>
            <dd class="col-sm-10">@surfBoard.Length</dd>
            <dt class="col-sm-2">Width</dt>
            <dd class="col-sm-10">@surfBoard.Width</dd>
            <dt class="col-sm-2">Thickness</dt>
            <dd class="col-sm-10">@surfBoard.Thickness</dd>
            <dt class="col-sm-2">Volume</dt>
            <dd class="col-sm-10">@surfBoard.Volume</dd>
            <dt class="col-sm-2">Boardtype</dt>
            <dd class="col-sm-10">@surfBoard.Boardtype</dd>
            <dt class="col-sm-2">Price</dt>
            <dd class="col-sm-10">@surfBoard.Price</dd>
            <dt class="col-sm-2">
                <button @onclick="delete" class="btn btn-danger">Delete</button>
            </dt>
        </dl>
    </div>
}

@code {



    [Parameter]
    public Guid ID { get; set; }

    private SurfBoard? surfBoard;
    string URL = "";

    protected async override Task OnInitializedAsync()
    {
        ID = ID;
        URL = $"https://localhost:7244/api/Boards/{ID}?api-version=2.0";
        surfBoard = await Http.GetFromJsonAsync<SurfBoard>(URL);
    }

    public void BackToList()
    {
        navigationManager.NavigateTo("/surfboards");
    }

    public async Task delete()
    {
        HttpResponseMessage response;
        response = await Http.PostAsJsonAsync<SurfBoard>("https://localhost:7244/api/Boards/delete", surfBoard);

        if (response.IsSuccessStatusCode)
        {
            navigationManager.NavigateTo("/surfboards");
        }
    }
}
