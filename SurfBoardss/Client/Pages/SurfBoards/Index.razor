@page "/surfboards"
@using SurfBoardss.Shared

@inject HttpClient Http
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Surfboards</PageTitle>

<h1>Current surfboards</h1>

<p>This component demonstrates fetching data from the server.</p>

<button @onclick="WeatherforecastModal">
    weatherforecast 
</button>
@if (weatherforecast)
{
    <Weatherforecast @WeatherforecastModal="WeatherforecastModal"></Weatherforecast>
}
@if (surfboards == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <AuthorizeView Roles="Admin,Udlejer">
        <p>
            <button @onclick="Create" class="btn btn-primary">Opret ny</button>
        </p>
    </AuthorizeView>
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Boardname</th>
                <th>Boardtype</th>
                <th>Price</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var surfboard in surfboards)
            {
                <tr>
                    <td>@surfboard.Id</td>
                    <td>@surfboard.BoardName</td>
                    <td>@surfboard.Boardtype</td>
                    <td>@surfboard.Price</td>


                    <td>
                        <button @onclick="() => Rent(surfboard.Id)">Rent</button>|
                        <button @onclick="() => Details(surfboard.Id)">Details</button>
                    </td>
               
                    <AuthorizeView Roles="Admin">
                        <td>
                            <button @onclick="() => Edit(surfboard.Id)">Edit</button>|
                            <button @onclick="() => Delete(surfboard.Id)">Delete</button>
                        </td>
                    </AuthorizeView>                  
                    

                 </tr>
            }
        </tbody>
    </table>
}

@code {
    private SurfBoard[]? surfboards;

    protected override async Task OnInitializedAsync()
    {
        surfboards = await Http.GetFromJsonAsync<SurfBoard[]>("https://localhost:7187/api/v2/surfboards/");
    }
    private bool weatherforecast = false;
    public void WeatherforecastModal()
    {
        weatherforecast = !weatherforecast;
    } 


    private void Rent(Guid ID)
    {
      
    }

    private void Create(){
        navigationManager.NavigateTo("/create");
    }
 
    private void Details(Guid ID)
    {
        navigationManager.NavigateTo($"/details/{ID}");
    }
    private void Edit(Guid ID)
    {
        navigationManager.NavigateTo($"/edit/{ID}");
    }
    private void Delete(Guid ID)
    {
        navigationManager.NavigateTo($"/delete/{ID}");
    }

    //private async Task<bool> isAuthenticated()
    //{
    //    var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    //    return authenticationState.User.Identity.IsAuthenticated;
    //}
}
